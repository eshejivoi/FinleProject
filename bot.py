from config import bot
from telebot import types
import logic

hideBoard = types.ReplyKeyboardRemove()
user_data = {}


@bot.message_handler(commands=['QuesAns'])
def handle_helpcom(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?", callback_data="question_order"),
        types.InlineKeyboardButton("–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞?", callback_data="question_status"),
        types.InlineKeyboardButton("–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?", callback_data="question_cancel"),
        types.InlineKeyboardButton("–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏—à–µ–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º?", callback_data="question_broke"),
        types.InlineKeyboardButton("–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?", callback_data="question_support"),
        types.InlineKeyboardButton("–ö–∞–∫ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ?", callback_data="question_delivery")
    ]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def hand_start(message):
    bot.send_message(message.chat.id,
                     """–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø –±–æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ "–ü—Ä–æ–¥–∞–µ–º –≤—Å—ë –Ω–∞ —Å–≤–µ—Ç–µ". –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ: /help""")


@bot.message_handler(commands=['help'])
def hand_helpcom(message):
    bot.send_message(message.chat.id, """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n
    /QuesAns - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n
    /probTech - —Å–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–µ\n
    /probProd - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º\n
    /MyReq - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã""")


@bot.message_handler(commands=['probTech'])
def hand_tecpr(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    bot.register_next_step_handler(msg, process_problem_description, 'tech')


@bot.message_handler(commands=['probProd'])
def hand_prodpr(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    bot.register_next_step_handler(msg, process_problem_description, 'prod')


def process_problem_description(message, request_type):
    chat_id = message.chat.id
    problem_desc = message.text
    user_data[chat_id] = {'problem': problem_desc, 'type': request_type}
    msg = bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(msg, process_email)


def process_email(message):
    chat_id = message.chat.id
    email = message.text
    problem_data = user_data.get(chat_id, {})
    problem_desc = problem_data.get('problem')
    request_type = problem_data.get('type', 'tech')

    if not problem_desc:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    username = message.from_user.username or str(message.from_user.id)
    status = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ—Ö.)' if request_type == 'tech' else '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–æ–¥.)'
    logic.add_user(username, email, problem_desc, status)

    if chat_id in user_data:
        del user_data[chat_id]

    bot.send_message(chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


@bot.message_handler(commands=['MyReq'])
def handle_myreq(message):
    user_id = message.from_user.id
    requests = logic.get_user_requests(user_id)

    if not requests:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    response = "üìù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
    for req in requests:
        response += f"üìÖ {req['created_at']}\nüîß –°—Ç–∞—Ç—É—Å: {req['status']}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {req['request_text']}\n\n"

    bot.send_message(message.chat.id, response)


if __name__ == "__main__":
    bot.polling(none_stop=True)