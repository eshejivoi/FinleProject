from config import bot, ADMINS
from telebot import types
import logic

hideBoard = types.ReplyKeyboardRemove()
user_data = {}

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ main.py —Å–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
QA = {
    "question_order": {
        "question": "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        "answer": """–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."""
    },
    "question_status": {
        "question": "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞?",
        "answer": """–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –≤–æ–π–¥—è –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã". –¢–∞–º –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞."""
    },
    "question_cancel": {
        "question": "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
        "answer": "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞ –¥–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏."
    },
    "question_broke": {
        "question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏—à–µ–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º?",
        "answer": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ä–∞–∑—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å –æ–±–º–µ–Ω–æ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–∞."
    },
    "question_support": {
        "question": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
        "answer": "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —á–∞—Ç-–±–æ—Ç–∞."
    },
    "question_delivery": {
        "question": "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ?",
        "answer": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –¢–∞–º —É–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ä–æ–∫–∏."
    }
}


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in QA)
def handle_qa_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    data = call.data
    question = QA[data]['question']
    answer = QA[data]['answer']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚ùì <b>{question}</b>\n\n{answer}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode='HTML' –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    bot.send_message(
        call.message.chat.id,
        response,
        parse_mode='HTML'
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    bot.answer_callback_query(call.id)


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è)
@bot.message_handler(commands=['QuesAns'])
def handle_helpcom(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è QA
    buttons = [
        types.InlineKeyboardButton(
            text=item['question'],
            callback_data=key
        ) for key, item in QA.items()
    ]

    markup.add(*buttons)
    bot.send_message(
        message.chat.id,
        "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
        reply_markup=markup
    )

@bot.message_handler(commands=['start'])
def hand_start(message):
    bot.send_message(message.chat.id,
                     """–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø –±–æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ "–ü—Ä–æ–¥–∞–µ–º –≤—Å—ë –Ω–∞ —Å–≤–µ—Ç–µ". –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ: /help""")


@bot.message_handler(commands=['help'])
def hand_helpcom(message):
    bot.send_message(message.chat.id, """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n
    /QuesAns - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n
    /probTech - —Å–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–µ\n
    /probProd - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º\n
    /MyReq - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã""")


def process_email(message):
    chat_id = message.chat.id
    email = message.text
    problem_data = user_data.get(chat_id, {})
    problem_desc = problem_data.get('problem')
    request_type = problem_data.get('type', 'tech')

    if not problem_desc:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    username = message.from_user.username or str(message.from_user.id)
    status = '–∂–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    logic.add_user(username, email, problem_desc, status)

    if chat_id in user_data:
        del user_data[chat_id]

    bot.send_message(chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


def process_problem_description(message, request_type):
    chat_id = message.chat.id
    problem_desc = message.text
    user_data[chat_id] = {'problem': problem_desc, 'type': request_type}
    msg = bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(msg, process_email)  # –í—ã–∑–æ–≤ process_email


@bot.message_handler(commands=['probTech'])
def hand_tecpr(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    bot.register_next_step_handler(msg, process_problem_description, 'tech')


@bot.message_handler(commands=['probProd'])
def hand_prodpr(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    bot.register_next_step_handler(msg, process_problem_description, 'prod')


def process_problem_description(message, request_type):
    chat_id = message.chat.id
    problem_desc = message.text
    user_data[chat_id] = {'problem': problem_desc, 'type': request_type}
    msg = bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(msg, process_email)


def process_email(message):
    chat_id = message.chat.id
    email = message.text
    problem_data = user_data.get(chat_id, {})
    problem_desc = problem_data.get('problem')
    request_type = problem_data.get('type', 'tech')

    if not problem_desc:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    username = message.from_user.username or str(message.from_user.id)
    status = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ—Ö.)' if request_type == 'tech' else '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–æ–¥.)'
    logic.add_user(username, email, problem_desc, status)

    if chat_id in user_data:
        del user_data[chat_id]

    bot.send_message(chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

@bot.message_handler(commands=['MyReq'])
def handle_myreq(message):
    user_id = message.from_user.id
    requests = logic.get_user_requests(user_id)

    if not requests:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    response = "üìù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
    for req in requests:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        status_icon = "üïí" if req['status'] == '–∂–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' else "üîÑ" if req['status'] == '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è' else "‚úÖ"
        response += f"""üìÖ {req['created_at']}
{status_icon} –°—Ç–∞—Ç—É—Å: {req['status']}
‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {req['request_text']}\n\n"""

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id in ADMINS:
        bot.send_message(message.chat.id, "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



if __name__ == "__main__":
    bot.polling(none_stop=True)